{"version":3,"sources":["components/dataTable.js","tsvToJson.js","components/search-bar.js","App.js","serviceWorker.js","index.js","word_search.tsv"],"names":["internals","keyword","array","slice","filter","element","word","toLowerCase","indexOf","sort","firstElem","secondElem","number","DataTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fileData","_this2","d3","data","row","the","then","dataset","setState","searchInput","filterData","filterWordsWhichContainKeyword","sortByKeywordPosition","prioritizeSearch","react_default","a","createElement","Fragment","map","value","key","Component","SearchBar","searchBarInputHandler","e","target","type","placeholder","onChange","dataTable","App","className","search_bar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"0RAGMA,EAAY,CAElBA,+BAA2C,SAACC,EAASC,GACjD,OAAOA,EAAMC,QAAQC,OAAO,SAACC,GAAD,OAAaA,EAAQC,KAAKC,cAAcC,QAAQP,EAAQM,gBAAkB,KAG1GP,sBAAkC,SAACC,EAASC,GACxC,OAAOA,EAAMC,QAAQM,KAAK,SAACC,EAAWC,GAClC,OAAQD,EAAUJ,KAAKE,QAAQP,GAAYU,EAAWL,KAAKE,QAAQP,IAC1DU,EAAWC,OAAUF,EAAUE,WAIhDZ,0BAAsC,SAACC,EAASC,GAC5C,OAAOA,EAAMC,QAAQM,KAAK,SAACC,EAAWC,GAClC,OAAOA,EAAWC,OAAUF,EAAUE,WA0C/BC,cArCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,SAAW,IAHDR,mFAOC,IAAAS,EAAAN,KC1BZO,IAAOC,IAAM,SAASC,GACzB,MAAO,CACHrB,KAAMqB,EAAIC,IACVhB,OAAQe,EAAI,gBDwBUE,KAAK,SAACC,GAC5BN,EAAKO,SAAS,CACVR,SAAWO,iDAIL,IACPE,EAAed,KAAKJ,MAApBkB,YACAT,EAAYL,KAAKI,MAAjBC,SACHU,EAAajC,EAAUkC,+BAA+BF,EAAYT,GACtE,OAAOvB,EAAUmC,sBAAsBH,EAAaC,oCAKpD,IAAIA,EAAef,KAAKkB,mBAExB,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,UACKN,GAAcA,EAAW9B,MAAM,EAAE,IAAIsC,IAAI,SAAAC,GAAK,OAC3CL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAM9B,QAAS8B,EAAMpC,iBA9B9BsC,aEYTC,cA7BX,SAAAA,IAAa,IAAA9B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACT9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,QAQJ4B,sBAAwB,SAACC,GACrBhC,EAAKgB,SAAS,CACVC,YAAae,EAAEC,OAAON,SAT1B3B,EAAKO,MAAQ,CACTU,YAAa,IAHRjB,wEAiBT,OACIsB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,SAAOU,KAAK,OAAOC,YAAY,iBAC/BR,MAAOxB,KAAKI,MAAMU,YAClBmB,SAAUjC,KAAK4B,wBAEfT,EAAAC,EAAAC,cAACa,EAAD,CAAWpB,YAAad,KAAKI,MAAMU,sBAxB3BY,aCSTS,MARf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAACgB,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.528b11f3.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { getDataSetAsJsonFromTSV } from '../tsvToJson';\r\n\r\nconst internals = {}\r\n\r\ninternals.filterWordsWhichContainKeyword = (keyword, array) => {\r\n    return array.slice().filter((element) => element.word.toLowerCase().indexOf(keyword.toLowerCase()) > -1)\r\n};\r\n\r\ninternals.sortByKeywordPosition = (keyword, array) => { \r\n    return array.slice().sort((firstElem, secondElem) => {\r\n        return (firstElem.word.indexOf(keyword) -  secondElem.word.indexOf(keyword)) +\r\n                (secondElem.number -  firstElem.number)\r\n    })\r\n}\r\n\r\ninternals.sortByOccurenceOfTheWords = (keyword, array) => { \r\n    return array.slice().sort((firstElem, secondElem) => {\r\n        return secondElem.number -  firstElem.number\r\n    })\r\n}\r\n\r\nclass DataTable extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            fileData : []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        getDataSetAsJsonFromTSV().then((dataset) => {\r\n            this.setState({\r\n                fileData : dataset\r\n            })\r\n        })\r\n    }\r\n    prioritizeSearch(){\r\n        const {searchInput} = this.props;\r\n        const {fileData} = this.state;\r\n        let filterData = internals.filterWordsWhichContainKeyword(searchInput,fileData);\r\n        return internals.sortByKeywordPosition(searchInput, filterData);\r\n\r\n    }\r\n\r\n    render() {\r\n        let filterData  =  this.prioritizeSearch();\r\n        \r\n        return (\r\n            <>\r\n                <ul>\r\n                    {filterData && filterData.slice(0,25).map(value => (\r\n                        <li key={value.number}>{value.word}</li>\r\n                    ))}\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataTable;","// import * as fs from 'fs';\r\nimport data from './word_search.tsv';\r\nimport * as d3 from 'd3';\r\nexport const getDataSetAsJsonFromTSV = () => {\r\n    return d3.tsv(data, function(row){\r\n        return {\r\n            word: row.the,\r\n            number: row['23135851162']\r\n        }\r\n    })\r\n}\r\n\r\n","import React, {Component} from \"react\"; \r\n\r\nimport DataTable from './dataTable';\r\n\r\nclass SearchBar extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            searchInput: ''\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    searchBarInputHandler = (e) => {\r\n        this.setState({\r\n            searchInput: e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        // console.log(this.state.searchInput, 'parent');\r\n        return (\r\n            <>\r\n                <input type='text' placeholder=\"Search here...\" \r\n                value={this.state.searchInput} \r\n                onChange={this.searchBarInputHandler}\r\n                />\r\n                <DataTable searchInput={this.state.searchInput}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\nimport './App.css'; \n\nimport SearchBar from './components/search-bar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchBar/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/word_search.1710e1aa.tsv\";"],"sourceRoot":""}